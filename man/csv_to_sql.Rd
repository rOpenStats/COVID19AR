% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/csv_to_sql.R
\name{csv_to_sql}
\alias{csv_to_sql}
\title{Save a delimited text table into a single table sqlite database}
\usage{
csv_to_sql(
  csv_file,
  table_name,
  delim = ",",
  quote = "\\"",
  pre_process_size = 1000,
  chunk_size = 50000,
  show_progress_bar = TRUE,
  con = dbConnect(SQLite(), dbname = sqlite_file),
  cols.spec = NULL,
  ...
)
}
\arguments{
\item{csv_file}{Name of the text file to convert.}

\item{table_name}{Name of the table to store the data table in the sqlite
database.}

\item{delim}{Text file delimiter (default ",").}

\item{pre_process_size}{Number of lines to check the data types of the
individual columns (default 1000).}

\item{chunk_size}{Number of lines to read for each chunk (default 50000).}

\item{show_progress_bar}{Show progress bar (default TRUE).}

\item{con}{= dbConnect(SQLite(), dbname = sqlite_file),}

\item{cols.spec}{= NULL Columns specification for read_delim}

\item{...}{Further arguments to be passed to \code{read_delim}.}

\item{sqlite_file}{Name of the newly created sqlite file.}
}
\value{
a SQLite database
}
\description{
The table can be a comma separated (csv) or a tab separated (tsv) or any
other delimited text file. The file is read in chunks. Each chunk is copied
in the same sqlite table database before the next chunk is loaded into
memory. See the INBO tutorial \href{https://github.com/inbo/tutorials/blob/master/source/data-handling/large-files-R.Rmd}{Handling large files in R}
to learn more about.
}
\details{
Version modified by @kenarab
}
\section{Remark}{

The \code{callback} argument in the \code{read_delim_chunked} function call
refers to the custom written callback function `append_to_sql` applied
to each chunk.
}

\examples{
\dontrun{
library(R.utils)
library(dplyr)
csv.name <- "2016-04-20-processed-logs-big-file-example.csv"
db.name <- "2016-04-20-processed-logs-big-file-example.db"
# download the CSV file example
csv.url <- paste("https://s3-eu-west-1.amazonaws.com/lw-birdtracking-data/",
                 csv.name, ".gz", sep = "")
download.file(csv.url, destfile = paste0(csv.name, ".gz"))
gunzip(paste0(csv.name, ".gz"))
# Make a SQLite database
sqlite_file <- "example2.sqlite"
sqlite_conn <- dbConnect(SQLite(), dbname = sqlite_file)
table_name <- "birdtracks"
csv_to_sql(csv_file = csv.name,
              con = sqlite_conn,
              table_name =table_name)
# Get access to SQLite database
my_db <- src_sqlite(sqlite_file, create = FALSE)
bird_tracking <- tbl(my_db, "birdtracks")
# Example query via dplyr
results <- bird_tracking \%>\%
  filter(device_info_serial == 860) \%>\%
  select(date_time, latitude, longitude, altitude) \%>\%
  filter(date_time < "2014-07-01") \%>\%
  filter(date_time > "2014-03-01") \%>\%
  as_tibble()
head(results)
}
}
\concept{Data_handling_utilities}
